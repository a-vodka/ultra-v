
#include <vector>
#include <cassert>
#include <math.h>

#pragma hdrstop

#include "FFT_class.h"

#define PI M_PI

using namespace std;

FFT::FFT(int n, bool inverse)
    : n(n), inverse(inverse), result(vector<Complex>(n))
{
    lgN = 0;
    for (int i = n; i > 1; i >>= 1)
    {
        ++lgN;
        assert((i & 1) == 0);
    }
    omega.resize(lgN);
    int m = 1;
    for (int s = 0; s < lgN; ++s)
    {
        m <<= 1;
        if (inverse)
            omega[s] = exp(Complex(0, 2.0 * PI / m));
        else
            omega[s] = exp(Complex(0, -2.0 * PI / m));
    }
}

std::vector<FFT::Complex> FFT::transform(const vector<Complex>& buf)
{
    bitReverseCopy(buf, result);
    int m = 1;
    for (int s = 0; s < lgN; ++s)
    {
        m <<= 1;
        for (int k = 0; k < n; k += m)
        {
            Complex current_omega = 1;
            for (int j = 0; j < (m >> 1); ++j)
            {
                Complex t = current_omega * result[k + j + (m >> 1)];
                Complex u = result[k + j];
                result[k + j] = u + t;
                result[k + j + (m >> 1)] = u - t;
                current_omega *= omega[s];
            }
        }
    }
    if (inverse == false)
        for (int i = 0; i < n; ++i)
            result[i] /= n;
	return result;
}

inline double FFT::getIntensity(Complex c)
{
    return abs(c);
}

inline double FFT::getPhase(Complex c)
{
    return arg(c);
}

void FFT::bitReverseCopy(const vector<Complex>& src, vector<Complex>& dest)
        const
{
    for (int i = 0; i < n; ++i)
    {
        int index = i, rev = 0;
        for (int j = 0; j < lgN; ++j)
        {
            rev = (rev << 1) | (index & 1);
            index >>= 1;
        }
        dest[rev] = src[i];
    }
}

std::vector<FFT::Complex> FFT::transform2(vector<Complex>& x)
{
	int dir = inverse ? -1: 1;
	long m = log10(n)/log10(2);
	//int dir, long m,
   long i, i1, i2,j, k, l, l1, l2, n;
   Complex tx, t1, u, c;

   result = x;

   /*Calculate the number of points */
   n = 1;
   for(i = 0; i < m; i++)
	  n <<= 1;

   /* Do the bit reversal */
   i2 = n >> 1;
   j = 0;

   for (i = 0; i < n-1 ; i++)
   {
	  if (i < j)
		 swap(result[i], result[j]);

	  k = i2;

	  while (k <= j)
	  {
         j -= k;
         k >>= 1;
	  }

      j += k;
   }

   /* Compute the FFT */
   c.real(-1.0);
   c.imag(0.0);
   l2 = 1;
   for (l = 0; l < m; l++)
   {
      l1 = l2;
      l2 <<= 1;
      u.real(1.0);
	  u.imag(0.0);

      for (j = 0; j < l1; j++)
	  {
         for (i = j; i < n; i += l2)
		 {
            i1 = i + l1;
			t1 = u * result[i1];
			result[i1] = result[i] - t1;
			result[i] = result[i] + t1;
         }

         u = u * c;
      }

      c.imag(sqrt((1.0 - c.real()) / 2.0));
      if (dir == 1)
         c.imag(-c.imag());
	  c.real(sqrt((1.0 + c.real()) / 2.0));
   }

   /* Scaling for forward transform */
   if (dir == 1)
   {
      for (i = 0; i < n; i++)
		 result[i] /= (double)n;
   }
   return result;
}
