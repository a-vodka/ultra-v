//---------------------------------------------------------------------------

#include <vcl.h>

#include <math.h>
#include <values.h>

#pragma hdrstop

#include "FFT.h"
#include "myThread.h"
#include "PostProcTh.h"


//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "XPMan"
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
   InitializeCriticalSection(&CS);
   InitializeCriticalSection(&CS2);
   AdaThread = new MyThread(true);
   PostTh = new TPostProcThread(false);
}
//---------------------------------------------------------------------------

__fastcall TForm1::~TForm1()
{
  delete AdaThread;
  delete PostTh;
  DeleteCriticalSection(&CS);
  DeleteCriticalSection(&CS2);
}

//---------------------------------------------------------------------------
void __fastcall TForm1::Button2Click(TObject *Sender)
{
   AnsiString capt;

   Timer2->Enabled =  !Timer2->Enabled;
   Timer2->Enabled ? AdaThread->Resume(): AdaThread->Suspend();
   Timer2->Enabled ? capt="Стоп" : capt="Старт";

   Button2->Caption = capt;

}
//---------------------------------------------------------------------------
void __fastcall TForm1::ProccessFurier()
{
    const nn = FUR_MAX;  // рамер буфер для БПФ
    double* Ach = new double[nn];  // выделяем буфер для канала А
    double* Bch = new double[nn];  // выделяем для канала Б

    double maxa,maxb,mina,minb;    // максимум и минимум по каналам

    maxa = maxb = MINDOUBLE;
    mina = minb = MAXDOUBLE;

    for (int i=0;i<nn;i++)      // ищем минимум и максимум по каждому каналу попутно копируя в массивы
    {
        channels ch = furVect.front();
        Ach[i] = ch.A;
        Bch[i] = ch.B;

        maxa = max(Ach[i],maxa);
        maxb = max(Bch[i],maxb);
        mina = min(Ach[i],mina);
        minb = min(Bch[i],minb);

        furVect.pop_front();
    }
    double *resA = FFT(Ach,nn);  // БПФ для А
    double *resB = FFT(Bch,nn);  // БПФ для Б

    Series3->Clear();  //чистим графики
    Series4->Clear();

    // определяем частоту дискретизации
    double freq = AdaThread->ada.getFreq()/AdaThread->ada.getNumChannels()/(double)nn;


    // выводим результаты
    for (int i=1;i<nn/200;i++)
    {
       double f = i*freq;
       double a = resA[i]/nn*2.0;
       double b = resB[i]/nn*2.0;
       Series3->AddXY(f, a);
       Series4->AddXY(f, b);
    }
    delete []Ach;  // удаляем буферы для БПФ
    delete []Bch;
    delete []resA;
    delete []resB;
    double AmpA = (maxa -mina);
    double AmpB = (maxb-minb);

    double T = StrToFloat(Edit5->Text);
    Edit1->Text = FloatToStr(AmpA);
    Edit2->Text = FloatToStr(AmpB);

    Edit3->Text = FloatToStr(AmpA/(4*M_PI*M_PI*0.4*9.81)*T*T);
    Edit4->Text = FloatToStr(AmpB/(4*M_PI*M_PI*0.4*9.81)*T*T);


}

//---------------------------------------------------------------------------
void __fastcall TForm1::Timer2Timer(TObject *Sender)
{
    static int numadd; // количичество точек на графике
    EnterCriticalSection(&CS2);

    deque<channels> *pDeque = & PostTh->resultList;

    int n = pDeque->size();
    for (int i=0;i<n;i++)
    {
        channels ch = pDeque->front();
        furVect.push_back(ch);
        if (i%10==0) // выполняем прореживание -- берем каждую десятую
        {
           Series1->AddXY(ch.t,ch.A);
           Series2->AddXY(ch.t,ch.B);
           numadd++;
        }
        pDeque->pop_front();
    }


    while (numadd>5000)
    {
        Series1->Delete(0);
        Series2->Delete(0);
        numadd--;
    }

    if (furVect.size()>=FUR_MAX) // если накопилось достаточно данных для БПФ -- выполняем его
        ProccessFurier();
    LeaveCriticalSection(&CS2);
    //Caption = FloatToStr((double)AdaThread->dt*24*3600*1000);
    Caption = n;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::RadioGroup1Click(TObject *Sender)
{
    if (PostTh->resType != RadioGroup1->ItemIndex)
        PostTh->resType = RadioGroup1->ItemIndex;
}
//---------------------------------------------------------------------------

