//---------------------------------------------------------------------------

#include <vcl.h>
#include <math.hpp>
#pragma hdrstop

#include "PostProcTh.h"
#include "myThread.h"
#include "FFT.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------

//   Important: Methods and properties of objects in VCL can only be
//   used in a method called using Synchronize, for example:
//
//      Synchronize(UpdateCaption);
//
//   where UpdateCaption could look like:
//
//      void __fastcall TPostProcThread::UpdateCaption()
//      {
//        Form1->Caption = "Updated in a thread";
//      }
//---------------------------------------------------------------------------

__fastcall TPostProcThread::TPostProcThread(bool CreateSuspended)
    : TThread(CreateSuspended)
{
    resultType = 0;
}
//---------------------------------------------------------------------------
void TPostProcThread::SetName()
{
    THREADNAME_INFO info;
    info.dwType = 0x1000;
    info.szName = "PostProcThread";
    info.dwThreadID = -1;
    info.dwFlags = 0;

    __try
    {
         RaiseException( 0x406D1388, 0, sizeof(info)/sizeof(DWORD),(DWORD*)&info );
    }
    __except (EXCEPTION_CONTINUE_EXECUTION)
    {
    }
}
//---------------------------------------------------------------------------
void __fastcall TPostProcThread::Execute()
{
    SetName();
    __try
    {
    TmaxV = TmaxD = 0;
    while ( !Application->Terminated )
    {
        if (Terminated)
            break;

        int n = Form1->AdaThread->vect.size();
        if (n < 3 ) continue;
        EnterCriticalSection(&Form1->CS);
        EnterCriticalSection(&Form1->CS2);



        switch (resultType)
        {
            case 0: // Ускорения
                makeAccel(n);
                break;

            case 1: // Скорости
                makeVibro(n);
                break;

            case 2: // Перемещения
                makeDispl(n);
                break;

            default:
            case 3:  // Код АЦП
                makeADC(n);
                break;
        }


        LeaveCriticalSection(&Form1->CS);
        LeaveCriticalSection(&Form1->CS2);

    }
    }
    __finally
    {}
    //---- Place thread code here ----
}
//---------------------------------------------------------------------------

channels TPostProcThread::Calibrate(channels *ch)
{
    channels res;
    res.A = CAa + CAb*ch->A;
    res.B = CBa + CBb*ch->B;
    res.t = ch->t;
    return res;
}
channels TPostProcThread::CalibrateInV(channels *ch)
{
    channels res;
    res.A = AinV + BinV*ch->A;
    res.B = AinV + BinV*ch->B;
    res.t = ch->t;
    return res;
}

channels  TPostProcThread::Integrate(channels& prev,channels *ch1, channels *ch2)
{
   double dt_over_two = (ch2->t-ch1->t)/2.0;
   prev.A += (ch1->A+ch2->A)*dt_over_two;
   prev.B += (ch1->B+ch2->B)*dt_over_two;
   prev.t = ch2->t;
   return prev;
}

channels  TPostProcThread::Integrate2(channels& prev,channels *ch1, channels *ch2, channels *ch3)
{
   double dt_over_two_sq = (ch2->t-ch1->t)/2.0;

   dt_over_two_sq*=dt_over_two_sq;

   prev.A += (ch1->A+2*ch2->A+ch3->A)*dt_over_two_sq;
   prev.B += (ch1->B+2*ch2->B+ch3->B)*dt_over_two_sq;
   prev.t = ch2->t;
   return prev;
}

void TPostProcThread::makeAccel(UINT n)
{

    for (UINT i=0; i < n; i++)
    {
        channels ch = Form1->AdaThread->vect.front();
        ch = Calibrate(&ch);
        resultList.push_back(ch);
        Form1->AdaThread->vect.pop_front();
    }
}

void TPostProcThread::makeVoltage(UINT n)
{

    for (UINT i=0; i < n; i++)
    {
        channels ch = Form1->AdaThread->vect.front();
        ch = CalibrateInV(&ch);
        resultList.push_back(ch);
        Form1->AdaThread->vect.pop_front();
    }
}

void TPostProcThread::makeVibro(UINT n)
{
    channels ch1, ch2, res;
    ch1 = Calibrate(&Form1->AdaThread->vect.front());
    Form1->AdaThread->vect.pop_front();

    for (UINT i=1; i < n; i++)
    {
         ch2 = Calibrate(&Form1->AdaThread->vect.front());
         res = Integrate(startVelo, &ch1, &ch2);
         resultList.push_back(res);
         Form1->AdaThread->vect.pop_front();
         ch1 = ch2;
    }

}

void TPostProcThread::makeDispl(UINT n)
{
    channels ch1, ch2, ch3, res1,res2,res;
    ch1 = Calibrate(&Form1->AdaThread->vect.front());
    Form1->AdaThread->vect.pop_front();

    ch2 = Calibrate(&Form1->AdaThread->vect.front());
    Form1->AdaThread->vect.pop_front();

    res1 = Integrate(startVelo, &ch1, &ch2);
    
    for (UINT i=2; i < n; i++)
    {
         ch3 = Calibrate(&Form1->AdaThread->vect.front());

         res2 = Integrate(startVelo, &ch2, &ch3);

         res = Integrate(startDisp, &res1, &res2);

         resultList.push_back(res);
         Form1->AdaThread->vect.pop_front();
         ch1 = ch2;
         ch2 = ch3;
         res1 = res2;

    }
}

void TPostProcThread::makeADC(UINT n)
{
   for (UINT i=0; i < n; i++)
   {
        channels ch = Form1->AdaThread->vect.front();
        resultList.push_back(ch);
        Form1->AdaThread->vect.pop_front();
   }
}

void TPostProcThread::setResType(int type)
{
   resultType = type;
   startVelo.reset();
   startDisp.reset();
//  EnterCriticalSection(&Form1->CS2);
//   resultList.clear();
//   LeaveCriticalSection(&Form1->CS2);
}

